// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppThread.h>
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_count_kmers
Rcpp::List rcpp_count_kmers(Rcpp::StringVector aavector, int k, int ncores, bool aa2int);
RcppExport SEXP _korthoR_rcpp_count_kmers(SEXP aavectorSEXP, SEXP kSEXP, SEXP ncoresSEXP, SEXP aa2intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type aavector(aavectorSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type aa2int(aa2intSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_count_kmers(aavector, k, ncores, aa2int));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_count_mers
Rcpp::List rcpp_count_mers(Rcpp::StringVector aavector, int ncores);
RcppExport SEXP _korthoR_rcpp_count_mers(SEXP aavectorSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type aavector(aavectorSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_count_mers(aavector, ncores));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_jaccard_a_b
Rcpp::DataFrame rcpp_jaccard_a_b(Rcpp::List kmer_counts_q, Rcpp::List kmer_counts_t, int k, double min_jaccard, int ncores);
RcppExport SEXP _korthoR_rcpp_jaccard_a_b(SEXP kmer_counts_qSEXP, SEXP kmer_counts_tSEXP, SEXP kSEXP, SEXP min_jaccardSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type kmer_counts_q(kmer_counts_qSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type kmer_counts_t(kmer_counts_tSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type min_jaccard(min_jaccardSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_jaccard_a_b(kmer_counts_q, kmer_counts_t, k, min_jaccard, ncores));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_jaccard_a_b_Int64
Rcpp::DataFrame rcpp_jaccard_a_b_Int64(Rcpp::List kmer_counts_q_Int64, Rcpp::List kmer_counts_t_Int64, int k, double min_jaccard, int ncores);
RcppExport SEXP _korthoR_rcpp_jaccard_a_b_Int64(SEXP kmer_counts_q_Int64SEXP, SEXP kmer_counts_t_Int64SEXP, SEXP kSEXP, SEXP min_jaccardSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type kmer_counts_q_Int64(kmer_counts_q_Int64SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type kmer_counts_t_Int64(kmer_counts_t_Int64SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type min_jaccard(min_jaccardSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_jaccard_a_b_Int64(kmer_counts_q_Int64, kmer_counts_t_Int64, k, min_jaccard, ncores));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_jaccard_sparse
Rcpp::DataFrame rcpp_jaccard_sparse(Rcpp::List kmer_counts_q, Rcpp::List kmer_counts_t, int k, double min_jaccard, double sparse_threshold, int sparse_n, int ncores, bool debug);
RcppExport SEXP _korthoR_rcpp_jaccard_sparse(SEXP kmer_counts_qSEXP, SEXP kmer_counts_tSEXP, SEXP kSEXP, SEXP min_jaccardSEXP, SEXP sparse_thresholdSEXP, SEXP sparse_nSEXP, SEXP ncoresSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type kmer_counts_q(kmer_counts_qSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type kmer_counts_t(kmer_counts_tSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type min_jaccard(min_jaccardSEXP);
    Rcpp::traits::input_parameter< double >::type sparse_threshold(sparse_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type sparse_n(sparse_nSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_jaccard_sparse(kmer_counts_q, kmer_counts_t, k, min_jaccard, sparse_threshold, sparse_n, ncores, debug));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_jaccard_sparse_Int64
Rcpp::DataFrame rcpp_jaccard_sparse_Int64(Rcpp::List kmer_counts_q_Int64, Rcpp::List kmer_counts_t_Int64, int k, double min_jaccard, int ncores, bool debug);
RcppExport SEXP _korthoR_rcpp_jaccard_sparse_Int64(SEXP kmer_counts_q_Int64SEXP, SEXP kmer_counts_t_Int64SEXP, SEXP kSEXP, SEXP min_jaccardSEXP, SEXP ncoresSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type kmer_counts_q_Int64(kmer_counts_q_Int64SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type kmer_counts_t_Int64(kmer_counts_t_Int64SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type min_jaccard(min_jaccardSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_jaccard_sparse_Int64(kmer_counts_q_Int64, kmer_counts_t_Int64, k, min_jaccard, ncores, debug));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_jaccard_sparse_a_b
Rcpp::DataFrame rcpp_jaccard_sparse_a_b(Rcpp::List kmer_counts_q, Rcpp::List kmer_counts_t, int k, double min_jaccard, int ncores, bool debug);
RcppExport SEXP _korthoR_rcpp_jaccard_sparse_a_b(SEXP kmer_counts_qSEXP, SEXP kmer_counts_tSEXP, SEXP kSEXP, SEXP min_jaccardSEXP, SEXP ncoresSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type kmer_counts_q(kmer_counts_qSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type kmer_counts_t(kmer_counts_tSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type min_jaccard(min_jaccardSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_jaccard_sparse_a_b(kmer_counts_q, kmer_counts_t, k, min_jaccard, ncores, debug));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_jaccard_sparse_a_b_Int64
Rcpp::DataFrame rcpp_jaccard_sparse_a_b_Int64(Rcpp::List kmer_counts_q_Int64, Rcpp::List kmer_counts_t_Int64, int k, double min_jaccard, int ncores, bool debug);
RcppExport SEXP _korthoR_rcpp_jaccard_sparse_a_b_Int64(SEXP kmer_counts_q_Int64SEXP, SEXP kmer_counts_t_Int64SEXP, SEXP kSEXP, SEXP min_jaccardSEXP, SEXP ncoresSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type kmer_counts_q_Int64(kmer_counts_q_Int64SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type kmer_counts_t_Int64(kmer_counts_t_Int64SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type min_jaccard(min_jaccardSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_jaccard_sparse_a_b_Int64(kmer_counts_q_Int64, kmer_counts_t_Int64, k, min_jaccard, ncores, debug));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_korthoR_rcpp_count_kmers", (DL_FUNC) &_korthoR_rcpp_count_kmers, 4},
    {"_korthoR_rcpp_count_mers", (DL_FUNC) &_korthoR_rcpp_count_mers, 2},
    {"_korthoR_rcpp_jaccard_a_b", (DL_FUNC) &_korthoR_rcpp_jaccard_a_b, 5},
    {"_korthoR_rcpp_jaccard_a_b_Int64", (DL_FUNC) &_korthoR_rcpp_jaccard_a_b_Int64, 5},
    {"_korthoR_rcpp_jaccard_sparse", (DL_FUNC) &_korthoR_rcpp_jaccard_sparse, 8},
    {"_korthoR_rcpp_jaccard_sparse_Int64", (DL_FUNC) &_korthoR_rcpp_jaccard_sparse_Int64, 6},
    {"_korthoR_rcpp_jaccard_sparse_a_b", (DL_FUNC) &_korthoR_rcpp_jaccard_sparse_a_b, 6},
    {"_korthoR_rcpp_jaccard_sparse_a_b_Int64", (DL_FUNC) &_korthoR_rcpp_jaccard_sparse_a_b_Int64, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_korthoR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
